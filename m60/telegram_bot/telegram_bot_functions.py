from telegram import Bot, Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters
from telegram_bot.models.telegram import TelegramSubscriber
from asgiref.sync import sync_to_async, async_to_sync
from celery import shared_task
import os
import asyncio
from telegram_bot.models import TelegramSubscriber
from dotenv import load_dotenv

load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_API_KEY")

bot = Bot(token=TELEGRAM_TOKEN)

MENU_KEYBOARD = ReplyKeyboardMarkup(
    [["–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"]],
    resize_keyboard=True
)

@sync_to_async
def get_or_create_subscriber(chat_id, username, first_name):
    return TelegramSubscriber.objects.get_or_create(
        chat_id=chat_id,
        defaults={
            'username': username,
            'first_name': first_name,
        }
    )

@sync_to_async
def delete_subscriber(chat_id):
    return TelegramSubscriber.objects.filter(chat_id=chat_id).delete()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await show_menu(update, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")

async def show_menu(update: Update, text: str):
    await update.message.reply_text(
        text,
        reply_markup=MENU_KEYBOARD
    )

async def subscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user = update.effective_user
    
    subscriber, created = await get_or_create_subscriber(
        chat_id=chat_id,
        username=user.username,
        first_name=user.first_name
    )
    
    if created:
        await show_menu(update, "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!")
    else:
        await show_menu(update, "‚ÑπÔ∏è –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")

async def unsubscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    deleted_count, _ = await delete_subscriber(chat_id)
    
    if deleted_count > 0:
        await show_menu(update, "‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    else:
        await show_menu(update, "‚ÑπÔ∏è –í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    
    if text == "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è":
        await subscribe(update, context)
    elif text == "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π":
        await unsubscribe(update, context)
    else:
        await show_menu(update, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:")

@shared_task
def send_order_notification_task(order_id):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è Celery-–∑–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    from main_page.models import Order
    try:
        order = Order.objects.get(id=order_id)
        subscribers = list(TelegramSubscriber.objects.all())
        
        if not subscribers:
            return
        
        message = (
            f"üìå –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ!\n\n"
            f"üë§ –ò–º—è: {order.name}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order.telephone}\n"
        )
        
        try:
            loop = asyncio.get_event_loop()
        except RuntimeError:
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
        
        async def _send_messages():
            try:
                for subscriber in subscribers:
                    try:
                        await bot.send_message(
                            chat_id=subscriber.chat_id,
                            text=message
                        )
                        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {subscriber.chat_id}")
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {subscriber.chat_id}: {e}")
            except Exception as e:
                print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
                raise
        
        if loop.is_running():
            asyncio.create_task(_send_messages())
        else:
            loop.run_until_complete(_send_messages())
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        raise


async def send_telegram_messages(subscribers, message):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    for subscriber in subscribers:
        try:
            await bot.send_message(chat_id=subscriber.chat_id, text=message)
            print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {subscriber.chat_id}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {subscriber.chat_id}: {e}")


def setup_bot():
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("subscribe", subscribe))
    application.add_handler(CommandHandler("unsubscribe", unsubscribe))
    
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    application.run_polling()